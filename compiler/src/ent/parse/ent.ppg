// Assumes polyglot.jar is in classpath
include "polyglot/ext/jl7/parse/jl7.ppg"

package ent.parse;

import ent.types.EntTypeSystem;
import ent.types.EntFlags;
import ent.ast.EntNodeFactory;
import ent.ast.*;
import polyglot.parse.Name;
import polyglot.parse.VarDeclarator;

import java.util.Arrays;

parser Grm extends polyglot.ext.jl7.parse.Grm {:
  public final EntTypeSystem ts;
  public final EntNodeFactory nf;

  public Grm(Lexer l, TypeSystem t, NodeFactory n, ErrorQueue q) {
      super(l, t, n, q);
      ts = (EntTypeSystem) t;
      nf = (EntNodeFactory) n;
  } 
  
:};

terminal Token ATTRIBUTOR;
terminal Token COPY;
terminal Token MODE; 
terminal Token MODES;
terminal Token PARORD;
terminal Token SNAPSHOT;
terminal Token SNAPSHOTFORCE;
terminal Token MODEBOUND;
terminal Token MCASE;
terminal Token RARROW;
terminal Token MODESAFE;
terminal Token OVERMODE;
terminal Token LBOUND;

non terminal ModesDecl modes_declaration_opt;
non terminal ModesDecl modes_declaration;
non terminal ModeOrder mode_ordering;
non terminal List mode_orderings;

non terminal ModeTypeNode overmode_opt;
non terminal ModeTypeNode overmode;

non terminal AttributeDecl attribute_declaration;
non terminal AttributeDecl attribute_declaration_opt;
non terminal CopyDecl copy_declaration;

non terminal ModeValue mode_value;

non terminal List mode_type_parameters_decl_opt;
non terminal List mode_type_parameters_decl;
non terminal List mode_type_parameters;
non terminal ModeParamTypeNode mode_type_parameter;

non terminal List<ModeTypeNode> mode_type_parameter_bounds;
non terminal List<ModeTypeNode> mode_type_parameter_lower_bounds;
non terminal List<ModeTypeNode> mode_type_parameter_upper_bounds;

non terminal List<ModeTypeNode> mode_type_args;

non terminal ModeTypeNode mode_type_node;
non terminal ModeTypeNode mode_type_node_annon;
non terminal List<ModeTypeNode> mode_type_nodes;

non terminal Expr snapshot_expr;

non terminal TypeNode mcase_type;
non terminal Lit mcase_lit;
non terminal List mcase_fields;
non terminal McaseFieldDecl mcase_field;

non terminal dynamic_mode_recvr_annon;
non terminal Boolean dynamic_mode_recvr_annon_opt;

non terminal rparen_opt;

start with goal;


override compilation_unit ::=
                    // SourceFile
  package_declaration_opt:p import_declarations_opt:i modes_declaration_opt:m type_declarations_opt:t 
  {: 
    RESULT = parser.nf.SourceFile(new Position(parser.lexer.path(), 
                                               parser.lexer.file()), 
                                  p, 
                                  i, 
                                  t,
                                  m);
  :}
| error type_declarations_opt:c
  {: RESULT = parser.nf.SourceFile(new Position(parser.lexer.path(), 
                                                parser.lexer.file()), 
                                   null, 
                                   Collections.<Import> emptyList(), 
                                   c, 
                                   null);
  :}
;

modes_declaration_opt ::=
  modes_declaration:m
  {: RESULT = m; :}
|
  {: RESULT = null; :}
;

modes_declaration ::=
  MODES LBRACE:lb mode_orderings:ords RBRACE:rb
  {:
    RESULT = parser.nf.ModesDecl(parser.pos(lb, rb), ords);
  :}
;

mode_orderings ::=
  {: RESULT = new ArrayList(); :}
| mode_orderings:ords mode_ordering:m
  {: 
    RESULT = ords;
    ords.add(m);
  :}
;
  
mode_ordering ::=
  IDENTIFIER:lower PARORD IDENTIFIER:upper SEMICOLON:semi
  {: RESULT = 
    parser.nf.ModeOrder(parser.pos(lower, semi), 
                        lower.getIdentifier(), 
                        upper.getIdentifier()); 
  :}
;

override class_declaration ::=
  modifiers_or_annotations_opt:a CLASS:n IDENTIFIER:b type_parameters_opt:c mode_type_parameters_decl_opt:m super_opt:d interfaces_opt:e class_body:f
  {: 
    RESULT = 
      parser.nf.ClassDecl(
        parser.pos(n, e),  
        a.flags(), 
        a.annotations(), 
        parser.nf.Id(parser.pos(b), b.getIdentifier()), 
        d, 
        e, 
        f, 
        c,
        m
        ); 
  :}
;    

override interface_declaration ::=
  modifiers_or_annotations_opt:a INTERFACE:b IDENTIFIER:c type_parameters_opt:d mode_type_parameters_decl_opt:m extends_interfaces_opt:e interface_body:f
  {: 
    RESULT = 
      parser.nf.ClassDecl(
        parser.pos(b, f), 
        a.setFlag(Flags.INTERFACE).flags(), 
        a.annotations(), 
        parser.nf.Id(parser.pos(c), 
        c.getIdentifier()), 
        null, 
        e, 
        f, 
        d,
        m
        ); 
  :}
| AT:a INTERFACE:b IDENTIFIER:c annotation_body:d
  {: 
    List<TypeNode> superints = new LinkedList<>();
    superints.add(parser.nf.CanonicalTypeNode(parser.pos(b, d), parser.ts.Annotation()));
    RESULT = parser.nf.ClassDecl(parser.pos(a, d), Flags.INTERFACE.set(JL5Flags.ANNOTATION), null, parser.nf.Id(parser.pos(c), c.getIdentifier()), null, superints, d, null); 
  :}
| modifiers_or_annotations:a AT:b INTERFACE IDENTIFIER:d annotation_body:e
  {: 
    List<TypeNode> superints = new LinkedList<>();
    superints.add(parser.nf.CanonicalTypeNode(parser.pos(b, e), parser.ts.Annotation()));
    RESULT = parser.nf.ClassDecl(parser.pos(b, d), a.setFlag(Flags.INTERFACE.set(JL5Flags.ANNOTATION)).flags(), a.annotations(), parser.nf.Id(parser.pos(d), d.getIdentifier()), null, superints, e, null); 
  :}
; 

extend class_member_declaration ::=
  attribute_declaration:a
  {:
    List<ClassMember> l = new LinkedList<>();
    l.add(a);
    RESULT = l;
  :}
| copy_declaration:a 
  {:
    List<ClassMember> l = new LinkedList<>();
    l.add(a);
    RESULT = l;
  :}
;

attribute_declaration ::=
  ATTRIBUTOR:a method_body:b 
  {:
    RESULT = parser.nf.AttributeDecl(parser.pos(a,b), b);
  :}
;

attribute_declaration_opt ::=
  attribute_declaration:a 
  {: RESULT = a; :}
| /* empty */
  {: RESULT = null; :}
;  

copy_declaration ::=
  COPY:a method_body:body
  {:
    RESULT = parser.nf.CopyDecl(parser.pos(a,body), body);
  :}
;

extend literal ::=
  mode_value:n
  {:
    RESULT = n;
  :}
| mcase_lit:n
  {:
    RESULT = n;
  :}
;

mode_value ::=
  MODE:m LT mode_type_node:n GT:g
  {:
    RESULT = parser.nf.ModeValue(parser.pos(m,g), n);
  :}
; 

// 19.8.5) Constructor Declarations
override constructor_declaration ::=
  modifiers_or_annotations_opt:a simple_name:d LPAREN formal_parameter_list_opt:e RPAREN  throws_opt:f overmode_opt:o constructor_body:g
  {: 
    RESULT = parser.nf.ConstructorDecl(d.pos, a.flags(), a.annotations(), d.name, e, f, g, new LinkedList<ParamTypeNode>(), new ArrayList<ModeParamTypeNode>(), o); 
  :}
| modifiers_or_annotations_opt:a mode_type_parameters_decl:m simple_name:d LPAREN formal_parameter_list_opt:e RPAREN  throws_opt:f overmode_opt:o constructor_body:g
  {: 
    RESULT = parser.nf.ConstructorDecl(d.pos, a.flags(), a.annotations(), d.name, e, f, g, new LinkedList<ParamTypeNode>(), m, o); 
  :}
| modifiers_or_annotations_opt:a LT type_parameter_list_1:c simple_name:d LPAREN formal_parameter_list_opt:e RPAREN throws_opt:f overmode_opt:o constructor_body:g
  {: 
    RESULT = parser.nf.ConstructorDecl(d.pos, a.flags(), a.annotations(), d.name, e, f, g, c, new ArrayList<ModeParamTypeNode>(), o); 
  :} 
| modifiers_or_annotations_opt:a LT type_parameter_list_1:c mode_type_parameters_decl:m simple_name:d LPAREN formal_parameter_list_opt:e RPAREN throws_opt:f overmode_opt:o constructor_body:g
  {: 
    RESULT = parser.nf.ConstructorDecl(d.pos, a.flags(), a.annotations(), d.name, e, f, g, c, m, o); 
  :} 
; 

override method_header ::=
  modifiers_or_annotations_opt:a type:b IDENTIFIER:d LPAREN formal_parameter_list_opt:e RPAREN dims_opt:g throws_opt:h attribute_declaration_opt:adcl
  {: 
    RESULT = parser.nf.MethodDecl(parser.pos(b, g, d), 
                                  a.flags(), 
                                  a.annotations(), 
                                  parser.array(b, g.intValue()), 
                                  parser.nf.Id(parser.pos(d), d.getIdentifier()), 
                                  e, 
                                  h, 
                                  null, 
                                  new LinkedList<ParamTypeNode>(), 
                                  new ArrayList<ModeParamTypeNode>(), 
                                  null,
                                  adcl); 
  :}
| modifiers_or_annotations_opt:a mode_type_parameters_decl:m type:b IDENTIFIER:d LPAREN formal_parameter_list_opt:e RPAREN dims_opt:g throws_opt:h attribute_declaration_opt:adcl
  {: 
    RESULT = parser.nf.MethodDecl(parser.pos(b, g, d), 
                                  a.flags(), 
                                  a.annotations(), 
                                  parser.array(b, g.intValue()), 
                                  parser.nf.Id(parser.pos(d), d.getIdentifier()), 
                                  e, 
                                  h, 
                                  null, 
                                  new LinkedList<ParamTypeNode>(), 
                                  m, 
                                  null,
                                  adcl); 
  :}
| modifiers_or_annotations_opt:a LT type_parameter_list_1:c type:d IDENTIFIER:i LPAREN formal_parameter_list_opt:e RPAREN dims_opt:g throws_opt:h attribute_declaration_opt:adcl
  {: 
    RESULT = parser.nf.MethodDecl(parser.pos(d, g, i), 
                                  a.flags(), 
                                  a.annotations(), 
                                  parser.array(d, g.intValue()), 
                                  parser.nf.Id(parser.pos(i), i.getIdentifier()), 
                                  e, 
                                  h, 
                                  null, 
                                  c, 
                                  new ArrayList<ModeParamTypeNode>(), 
                                  null,
                                  adcl); 
  :}
| modifiers_or_annotations_opt:a LT type_parameter_list_1:c mode_type_parameters_decl:m type:d IDENTIFIER:i LPAREN formal_parameter_list_opt:e RPAREN dims_opt:g throws_opt:h attribute_declaration_opt:adcl
  {: 
    RESULT = parser.nf.MethodDecl(parser.pos(d, g, i), 
                                  a.flags(), 
                                  a.annotations(), 
                                  parser.array(d, g.intValue()), 
                                  parser.nf.Id(parser.pos(i), i.getIdentifier()), 
                                  e, 
                                  h, 
                                  null, 
                                  c, 
                                  m, 
                                  null,
                                  adcl); 
  :} 
| modifiers_or_annotations_opt:a VOID:b IDENTIFIER:c LPAREN formal_parameter_list_opt:e RPAREN:f throws_opt:h attribute_declaration_opt:adcl
  {: 
    RESULT = parser.nf.MethodDecl(parser.pos(b, f, c), 
                                  a.flags(), 
                                  a.annotations(), 
                                  parser.nf.CanonicalTypeNode(parser.pos(b), parser.ts.Void()), 
                                  parser.nf.Id(parser.pos(c), c.getIdentifier()), 
                                  e, 
                                  h, 
                                  null, 
                                  new 
                                  LinkedList<ParamTypeNode>(), 
                                  new ArrayList<ModeParamTypeNode>(), 
                                  null,
                                  adcl); 
  :}
| modifiers_or_annotations_opt:a mode_type_parameters_decl:m VOID:b IDENTIFIER:c LPAREN formal_parameter_list_opt:e RPAREN:f throws_opt:h attribute_declaration_opt:adcl
  {: 
    RESULT = parser.nf.MethodDecl(parser.pos(b, f, c), 
                                  a.flags(), 
                                  a.annotations(), 
                                  parser.nf.CanonicalTypeNode(parser.pos(b), parser.ts.Void()), 
                                  parser.nf.Id(parser.pos(c), c.getIdentifier()), 
                                  e, 
                                  h, 
                                  null, 
                                  new 
                                  LinkedList<ParamTypeNode>(), 
                                  m, 
                                  null,
                                  adcl); 
  :}
| modifiers_or_annotations_opt:a LT type_parameter_list_1:c VOID:d IDENTIFIER:i LPAREN formal_parameter_list_opt:e RPAREN:f throws_opt:h attribute_declaration_opt:adcl
  {: 
    RESULT = parser.nf.MethodDecl(parser.pos(d, f, i), 
                                  a.flags(), 
                                  a.annotations(), 
                                  parser.nf.CanonicalTypeNode(parser.pos(d), parser.ts.Void()), 
                                  parser.nf.Id(parser.pos(i), i.getIdentifier()), 
                                  e, 
                                  h, 
                                  null, 
                                  c, 
                                  new 
                                  ArrayList<ModeParamTypeNode>(), 
                                  null,
                                  adcl); 
  :}
| modifiers_or_annotations_opt:a LT type_parameter_list_1:c mode_type_parameters_decl:m VOID:d IDENTIFIER:i LPAREN formal_parameter_list_opt:e RPAREN:f throws_opt:h attribute_declaration_opt:adcl
  {: 
    RESULT = parser.nf.MethodDecl(parser.pos(d, f, i), 
                                  a.flags(), 
                                  a.annotations(), 
                                  parser.nf.CanonicalTypeNode(parser.pos(d), parser.ts.Void()), 
                                  parser.nf.Id(parser.pos(i), i.getIdentifier()), 
                                  e, 
                                  h, 
                                  null, 
                                  c, 
                                  m, 
                                  null,
                                  adcl); 
  :}
; 

overmode ::=
  OVERMODE:a LT:b mode_type_node:m GT:d
  {: RESULT = m; :}
;
  

overmode_opt ::=
  overmode:o
  {: RESULT = o; :}
| /* empty */
  {: RESULT = null; :}
;

mode_type_parameters_decl_opt ::=
  mode_type_parameters_decl:m
  {: RESULT = m; :}
| /* empty */
  {: RESULT = null; :}
;

mode_type_parameters_decl ::=
  MODE LT mode_type_parameters:params GT
  {: RESULT = params; :}
;

mode_type_parameters ::=
  mode_type_parameter:m
  {: 
    List<ModeParamTypeNode> params = new ArrayList<ModeParamTypeNode>();
    params.add(m);
    RESULT = params;
  :}
| mode_type_parameters:params COMMA mode_type_parameter:m
  {: 
    RESULT = params;
    params.add(m);
  :}
;

dynamic_mode_recvr_annon ::= QUESTION RARROW ;

dynamic_mode_recvr_annon_opt ::=
  /* epsilon */
  {: RESULT = false; :}
| dynamic_mode_recvr_annon
  {: RESULT = true; :}
;

mode_type_parameter ::=
  dynamic_mode_recvr_annon_opt:recvr mode_type_parameter_lower_bounds:lb IDENTIFIER:id mode_type_parameter_upper_bounds:ub
  {:
    RESULT = parser.nf.ModeParamTypeNode(parser.pos(id), parser.nf.Id(parser.pos(id), id.getIdentifier()), recvr, lb, ub);
  :}
;

// TODO: I will lex hack this 
mode_type_parameter_lower_bounds ::=
  {: RESULT = null; :}
| LPAREN mode_type_parameter_bounds:lb LTEQ
  {: RESULT = lb; :}
;

mode_type_parameter_upper_bounds ::=
  {: RESULT = null; :}
| LTEQ mode_type_parameter_bounds:ub rparen_opt
  {: RESULT = ub; :}
; 

rparen_opt ::=
  /* empty */
| RPAREN
;

mode_type_parameter_bounds ::=
  mode_type_node:n
  {:
    List<ModeTypeNode> l = new ArrayList<ModeTypeNode>();
    l.add(n);
    RESULT = l;
  :}
| mode_type_parameter_bounds:b AND mode_type_node:n
  {:
    b.add(n);
    RESULT = b;
  :}
; 

override class_or_interface_type ::=
  class_or_interface:a
  {: 
    RESULT = parser.nf.AmbModeTypeInstantiation(parser.pos(a), a);
  :}
|	class_or_interface:a LT type_argument_list_1:c
  {: 
    TypeNode n = parser.nf.AmbTypeInstantiation(parser.pos(a, c), a, c); 
    RESULT = parser.nf.AmbModeTypeInstantiation(parser.pos(n), n);
  :}
| class_or_interface:a mode_type_args:args
  {: 
    RESULT = parser.nf.AmbModeTypeInstantiation(parser.pos(a), a, args);
  :}
|	class_or_interface:a LT type_argument_list_1:c mode_type_args:args
  {: 
    TypeNode n = parser.nf.AmbTypeInstantiation(parser.pos(a, c), a, c); 
    RESULT = parser.nf.AmbModeTypeInstantiation(parser.pos(n), n, args);
  :}
;

override primitive_type ::=
  numeric_type:a
  {:
    RESULT = parser.nf.AmbModeTypeInstantiation(parser.pos(a), a);
  :}
| BOOLEAN:a
  {:
    TypeNode n = parser.nf.CanonicalTypeNode(parser.pos(a), parser.ts.Boolean());
    RESULT = parser.nf.AmbModeTypeInstantiation(parser.pos(n), n);
  :}
| numeric_type:a mode_type_args:args
  {: 
    RESULT = parser.nf.AmbModeTypeInstantiation(parser.pos(a), a, args);
  :}
| BOOLEAN:a mode_type_args:args
  {: 
    TypeNode n = parser.nf.CanonicalTypeNode(parser.pos(a), parser.ts.Boolean()); 
    RESULT = parser.nf.AmbModeTypeInstantiation(parser.pos(n), n, args);
  :}
;

override array_type ::=	
  primitive_type:a dims:b
  {: 
    TypeNode tn = parser.array(a, b.intValue()); 
    RESULT = parser.nf.AmbModeTypeInstantiation(parser.pos(a,b), tn);
  :}
|
  primitive_type:a dims:b mode_type_args:args
  {: 
    TypeNode tn = parser.array(a, b.intValue()); 
    RESULT = parser.nf.AmbModeTypeInstantiation(parser.pos(a,b), tn, args);
  :}
	// we have class_or_interface_type here even though only unbounded
	// wildcards are really allowed in the parameterization.
	// we have to expand this to avoid lookahead problems.
|	name:a dims:b
  {: 
    TypeNode tn = parser.array(a.toType(), b.intValue()); 
    RESULT = parser.nf.AmbModeTypeInstantiation(parser.pos(a,b), tn);
  :}
| name:a dims:b mode_type_args:args
  {: 
    TypeNode tn = parser.array(a.toType(), b.intValue()); 
    RESULT = parser.nf.AmbModeTypeInstantiation(parser.pos(a,b), tn, args);
  :}
|	class_or_interface:a LT type_argument_list_1:b DOT name:c dims:d
  // Instantiating type arguments
  {: 
    TypeNode tn = parser.nf.AmbTypeInstantiation(parser.pos(a, b), a, b);
    TypeNode aa = ((JL5Name) c).toType(tn);
    RESULT = parser.array(aa, d.intValue()); 
  :}
|	class_or_interface:a LT type_argument_list_1:b dims:c
  // Instantiating type arguments
  {: 
    RESULT = parser.array(parser.nf.AmbTypeInstantiation(parser.pos(a, b), a, b), c.intValue()); 
  :}
;

/*
override array_creation_expression ::= 
  // NewArray
  NEW:n primitive_type:a dim_exprs:b dims_opt:c
  {: 
    TypeNode tn = parser.nf.AmbModeTypeInstantiation(parser.pos(a), a);
    RESULT = parser.nf.NewArray(parser.pos(n, b), tn, b, c.intValue()); 
  :}
  NEW:n primitive_type:a dim_exprs:b dims_opt:c
  {: 
    TypeNode tn = parser.nf.AmbModeTypeInstantiation(parser.pos(a), a);
    RESULT = parser.nf.NewArray(parser.pos(n, b), tn, b, c.intValue()); 
  :}
| NEW:n class_or_interface_type:a dim_exprs:b dims_opt:c
  {: 
    TypeNode tn = parser.nf.AmbModeTypeInstantiation(parser.pos(a), a);
    RESULT = parser.nf.NewArray(parser.pos(n, b), tn, b, c.intValue()); 
  :}
| initialized_array_creation_expression:a
	{: 
    RESULT = a; 
  :}
;		
*/


mode_type_args ::=
  MODE LT mode_type_nodes:nodes GT
  {:
    RESULT = nodes;
  :}
; 

mode_type_nodes ::=
  mode_type_node_annon:n
  {:
    List<ModeTypeNode> nodes = new ArrayList<ModeTypeNode>();
    nodes.add(n);
    RESULT = nodes;
  :}
| mode_type_nodes:nodes COMMA mode_type_node_annon:n
  {:
    nodes.add(n);
    RESULT = nodes;
  :}
;

mode_type_node_annon ::=
  mode_type_node:m
  {:
    RESULT = m;
  :}
| mode_type_node:lb LTEQ MULT LTEQ mode_type_node:ub
  {:
    RESULT = parser.nf.ModeTypeNode(parser.pos(lb,ub), "_", lb, ub);
  :}
; 

mode_type_node ::=
  IDENTIFIER:id
  {:
    RESULT = parser.nf.ModeTypeNode(parser.pos(id), id.getIdentifier());
  :}
| MULT:m
  {:
    RESULT = parser.nf.ModeTypeNode(parser.pos(m), "*");
  :}
| QUESTION:q
  {:
    RESULT = parser.nf.ModeTypeNode(parser.pos(q), "?");
  :}
; 

extend primary ::=
  snapshot_expr:s
  {:
    RESULT = s;
  :}
;

snapshot_expr ::=
  SNAPSHOT:s expression:e MODEBOUND LBRACK RBRACK:r
  {:
    ModeTypeNode wildcard = parser.nf.ModeTypeNode(parser.pos(e), "*");
    ModeValue mv = parser.nf.ModeValue(parser.pos(e), wildcard);
    RESULT = parser.nf.SnapshotExpr(parser.pos(s,r), e, mv, mv, false, false);
  :}
| SNAPSHOT:s expression:e MODEBOUND LBRACK expression:lb COMMA expression:ub RBRACK:r
  {:
    RESULT = parser.nf.SnapshotExpr(parser.pos(s,r), e, lb, ub, false, false);
  :}
| SNAPSHOTFORCE:s expression:e MODEBOUND LBRACK expression:lb COMMA expression:ub RBRACK:r
  {:
    RESULT = parser.nf.SnapshotExpr(parser.pos(s,r), e, lb, ub, false, true);
  :}
;

extend type ::=
  mcase_type:t
  {:
    RESULT = t;
  :}
;

mcase_type ::=
  MCASE:a LT type:t GT:b
  {:
    TypeNode n = parser.nf.McaseTypeNode(parser.pos(a,b), t);
    RESULT = parser.nf.AmbModeTypeInstantiation(parser.pos(a), n);
  :}
| MCASE:a LT type:t GT:b mode_type_args:args
  {:
    TypeNode n = parser.nf.McaseTypeNode(parser.pos(a,b), t);
    RESULT = parser.nf.AmbModeTypeInstantiation(parser.pos(a), n, args);
  :}
;

mcase_lit ::=
  mcase_type:t LBRACE mcase_fields:f RBRACE:b
  {:
    RESULT = parser.nf.McaseLit(parser.pos(t,b),t,f);
  :}
;

mcase_fields ::=
  // empty
  {: 
    RESULT = new ArrayList<McaseFieldDecl>();
  :}
| mcase_fields:l mcase_field:m SEMICOLON
  {:
    l.add(m);
    RESULT = l;
  :}
;

mcase_field ::=
  IDENTIFIER:m COLON expression:e 
  {:
    RESULT = parser.nf.McaseFieldDecl(parser.pos(m,e), 
                                      parser.nf.Id(parser.pos(m), m.getIdentifier()), 
                                      e);
  :}
;

override cast_expression ::=
  LPAREN:a primitive_type:b dims_opt:c RPAREN unary_expression:e
  {: 
    RESULT = parser.nf.Cast(parser.pos(a, e, b), parser.array(b, c.intValue()), e); 
  :} 
|	LPAREN:a name:b RPAREN unary_expression_not_plus_minus:d
  {: 
    TypeNode tn = parser.nf.AmbModeTypeInstantiation(parser.pos(b), b.toType());
    RESULT = parser.nf.Cast(parser.pos(a, d, b), tn, d); 
  :}
| LPAREN:a name:b mode_type_args:args RPAREN unary_expression_not_plus_minus:d
  {: 
    TypeNode tn = parser.nf.AmbModeTypeInstantiation(parser.pos(b), b.toType(), args);
    RESULT = parser.nf.Cast(parser.pos(a, d, b), tn, d); 
  :}

|	LPAREN:a name:b dims:c RPAREN unary_expression_not_plus_minus:e
  {: 
    RESULT = parser.nf.Cast(parser.pos(a, e, b), parser.array(b.toType(), c.intValue()), e); 
  :}
|	LPAREN:a name:b LT type_argument_list_1:d dims_opt:e RPAREN unary_expression_not_plus_minus:g
  {: 
    TypeNode tn = parser.nf.AmbTypeInstantiation(parser.pos(b, d), b.toType(),d);
    RESULT = parser.nf.Cast(parser.pos(a, g, b), parser.array(tn, e.intValue()), g); 
  :}
|	LPAREN:a name:b LT type_argument_list_1:d DOT class_or_interface:f dims_opt:g RPAREN unary_expression_not_plus_minus:i
  {: 
    AmbTypeNode bb = (AmbTypeNode)f;
    TypeNode tn = parser.nf.AmbTypeInstantiation(parser.pos(b, d), parser.exprToType(b.toExpr()),d);
    RESULT = parser.nf.Cast(parser.pos(a, i, b), parser.array(parser.nf.AmbTypeNode(parser.pos(b, f), tn, bb.id()), g.intValue()), i); 
  :}
|	LPAREN:a name:b LT type_argument_list_1:d DOT class_or_interface:f LT type_argument_list_1:h dims_opt:j RPAREN unary_expression_not_plus_minus:i 
  {: 
    AmbTypeNode bb = (AmbTypeNode)f;
    TypeNode tn = parser.nf.AmbTypeInstantiation(parser.pos(b, d), parser.exprToType(b.toExpr()), d);
    tn = parser.nf.AmbTypeInstantiation(parser.pos(b, h), parser.nf.AmbTypeNode(parser.pos(b, f), tn, bb.id()), h);
    RESULT = parser.nf.Cast(parser.pos(a, i, b), parser.array(tn, j.intValue()), i); 
  :}
;

override class_instance_creation_expression ::=
  NEW:a class_or_interface_type:b LPAREN argument_list_opt:d RPAREN class_body_opt:f
  {: 
    RESULT = parser.nf.New(parser.pos(a), b, d, f); 
  :}
|	NEW:a type_arguments:b class_or_interface_type:c LPAREN argument_list_opt:e RPAREN class_body_opt:g
  // Instantiating type arguments    
  {: 
    RESULT = parser.nf.New(parser.pos(a), b, c, e, g); 
  :}
|	primary:a DOT NEW type_arguments_opt:d IDENTIFIER:e LPAREN argument_list_opt:h RPAREN class_body_opt:j
  // Instantiating type arguments    
  {: 
    TypeNode aa = (new JL5Name(parser.nf, parser.ts, parser.pos(e), parser.nf.Id(parser.pos(e), e.getIdentifier()))).toType();
    RESULT = parser.nf.New(parser.pos(a), a, d, aa, h, j); 
  :}
|	name:a DOT NEW type_arguments_opt:d IDENTIFIER:e LPAREN argument_list_opt:h RPAREN class_body_opt:j
  // Instantiating type arguments    
  {: 
    TypeNode aa = (new JL5Name(parser.nf, parser.ts, parser.pos(e), parser.nf.Id(parser.pos(e), e.getIdentifier()))).toType();
    RESULT = parser.nf.New(parser.pos(a), a.toExpr(), d, aa, h, j); 
  :}
|	primary:a DOT NEW type_arguments_opt:d IDENTIFIER:e type_arguments:f LPAREN argument_list_opt:h RPAREN class_body_opt:j
  // Instantiating type arguments    
  {: 
    TypeNode aa = (new JL5Name(parser.nf, parser.ts, parser.pos(e), parser.nf.Id(parser.pos(e), e.getIdentifier()))).toType();
    TypeNode tn = parser.nf.AmbTypeInstantiation(parser.pos(e, f), aa, f); 
    RESULT = parser.nf.New(parser.pos(a), a, d, tn, h, j); 
  :}
|	name:a DOT NEW type_arguments_opt:d IDENTIFIER:e type_arguments:f LPAREN argument_list_opt:h RPAREN class_body_opt:j
  // Instantiating type arguments    
  {: 
    TypeNode aa = (new JL5Name(parser.nf, parser.ts, parser.pos(e), parser.nf.Id(parser.pos(e), e.getIdentifier()))).toType();
    TypeNode tn = parser.nf.AmbTypeInstantiation(parser.pos(e, f), aa, f);
    RESULT = parser.nf.New(parser.pos(a), a.toExpr(), d, tn, h, j); 
  :}
| NEW:a class_or_interface:b LT GT:d LPAREN argument_list_opt:f RPAREN class_body_opt:h 
  /* JL7 DiamondType */
  {:
		TypeNode tn = parser.nf.AmbDiamondTypeNode(parser.pos(b, d), b);
    TypeNode mn = parser.nf.AmbModeTypeInstantiation(parser.pos(tn), tn);
		RESULT = parser.nf.New(parser.pos(a), mn, f, h);
	:}
| NEW:a type_arguments:b class_or_interface:c LT GT:e LPAREN argument_list_opt:g RPAREN class_body_opt:i
  /* Instantiating type arguments */ 
  {:
		TypeNode tn = parser.nf.AmbDiamondTypeNode(parser.pos(c, e), c);
    TypeNode mn = parser.nf.AmbModeTypeInstantiation(parser.pos(tn), tn);
		RESULT = parser.nf.New(parser.pos(a), b, mn, g, i);
	:}
| primary:a DOT NEW type_arguments_opt:d IDENTIFIER:e LT GT:g LPAREN argument_list_opt:i RPAREN class_body_opt:k
  /* Instantiating type arguments */ 
  {:
	  TypeNode aa = (new JL5Name(parser.nf, parser.ts, parser.pos(e), parser.nf.Id(parser.pos(e), e.getIdentifier()))).toType();
	  TypeNode tn = parser.nf.AmbDiamondTypeNode(parser.pos(e, g), aa);
    TypeNode mn = parser.nf.AmbModeTypeInstantiation(parser.pos(tn), tn);
	  RESULT = parser.nf.New(parser.pos(a), a, d, mn, i, k);
	:}
| name:a DOT NEW type_arguments_opt:d IDENTIFIER:e LT GT:g LPAREN argument_list_opt:i RPAREN class_body_opt:k
  /* Instantiating type arguments */ 
  {:
		TypeNode aa = (new JL5Name(parser.nf, parser.ts, parser.pos(e), parser.nf.Id(parser.pos(e), e.getIdentifier()))).toType();
		TypeNode tn = parser.nf.AmbDiamondTypeNode(parser.pos(e, g), aa);
    TypeNode mn = parser.nf.AmbModeTypeInstantiation(parser.pos(tn), tn);
		RESULT = parser.nf.New(parser.pos(a), a.toExpr(), d, mn, i, k);
	:}
;

extend modifier ::=
  MODESAFE:a 
  {:
    RESULT = EntFlags.MODESAFE.position(a.getPosition());
  :}
;

extend method_invocation ::=
  primary:a DOT mode_type_args:args IDENTIFIER:d LPAREN argument_list_opt:f RPAREN:g
  {: 
    RESULT = parser.nf.Call(parser.pos(a, g), a, null, parser.nf.Id(parser.pos(d), d.getIdentifier()), f, args); 
  :}
|	name:a DOT mode_type_args:args IDENTIFIER:d LPAREN argument_list_opt:f RPAREN:g
  {: 
    RESULT = parser.nf.Call(parser.pos(a, g), a.toReceiver(), null, parser.nf.Id(parser.pos(d), d.getIdentifier()), f, args); 
  :}
;

